// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: service/v1alpha1/service.proto

package svcv1alpha1connect

import (
	context "context"
	v1alpha1 "ddd-sample/interface/transport/service/v1alpha1"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// DDDSampleServiceName is the fully-qualified name of the DDDSampleService service.
	DDDSampleServiceName = "dddsample.service.v1alpha1.DDDSampleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DDDSampleServiceCreateTicketProcedure is the fully-qualified name of the DDDSampleService's
	// CreateTicket RPC.
	DDDSampleServiceCreateTicketProcedure = "/dddsample.service.v1alpha1.DDDSampleService/CreateTicket"
	// DDDSampleServiceGetTicketProcedure is the fully-qualified name of the DDDSampleService's
	// GetTicket RPC.
	DDDSampleServiceGetTicketProcedure = "/dddsample.service.v1alpha1.DDDSampleService/GetTicket"
)

// DDDSampleServiceClient is a client for the dddsample.service.v1alpha1.DDDSampleService service.
type DDDSampleServiceClient interface {
	CreateTicket(context.Context, *connect_go.Request[v1alpha1.CreateTicketRequest]) (*connect_go.Response[v1alpha1.CreateTicketResponse], error)
	GetTicket(context.Context, *connect_go.Request[v1alpha1.GetTicketRequest]) (*connect_go.Response[v1alpha1.GetTicketResponse], error)
}

// NewDDDSampleServiceClient constructs a client for the dddsample.service.v1alpha1.DDDSampleService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDDDSampleServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DDDSampleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &dDDSampleServiceClient{
		createTicket: connect_go.NewClient[v1alpha1.CreateTicketRequest, v1alpha1.CreateTicketResponse](
			httpClient,
			baseURL+DDDSampleServiceCreateTicketProcedure,
			opts...,
		),
		getTicket: connect_go.NewClient[v1alpha1.GetTicketRequest, v1alpha1.GetTicketResponse](
			httpClient,
			baseURL+DDDSampleServiceGetTicketProcedure,
			opts...,
		),
	}
}

// dDDSampleServiceClient implements DDDSampleServiceClient.
type dDDSampleServiceClient struct {
	createTicket *connect_go.Client[v1alpha1.CreateTicketRequest, v1alpha1.CreateTicketResponse]
	getTicket    *connect_go.Client[v1alpha1.GetTicketRequest, v1alpha1.GetTicketResponse]
}

// CreateTicket calls dddsample.service.v1alpha1.DDDSampleService.CreateTicket.
func (c *dDDSampleServiceClient) CreateTicket(ctx context.Context, req *connect_go.Request[v1alpha1.CreateTicketRequest]) (*connect_go.Response[v1alpha1.CreateTicketResponse], error) {
	return c.createTicket.CallUnary(ctx, req)
}

// GetTicket calls dddsample.service.v1alpha1.DDDSampleService.GetTicket.
func (c *dDDSampleServiceClient) GetTicket(ctx context.Context, req *connect_go.Request[v1alpha1.GetTicketRequest]) (*connect_go.Response[v1alpha1.GetTicketResponse], error) {
	return c.getTicket.CallUnary(ctx, req)
}

// DDDSampleServiceHandler is an implementation of the dddsample.service.v1alpha1.DDDSampleService
// service.
type DDDSampleServiceHandler interface {
	CreateTicket(context.Context, *connect_go.Request[v1alpha1.CreateTicketRequest]) (*connect_go.Response[v1alpha1.CreateTicketResponse], error)
	GetTicket(context.Context, *connect_go.Request[v1alpha1.GetTicketRequest]) (*connect_go.Response[v1alpha1.GetTicketResponse], error)
}

// NewDDDSampleServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDDDSampleServiceHandler(svc DDDSampleServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(DDDSampleServiceCreateTicketProcedure, connect_go.NewUnaryHandler(
		DDDSampleServiceCreateTicketProcedure,
		svc.CreateTicket,
		opts...,
	))
	mux.Handle(DDDSampleServiceGetTicketProcedure, connect_go.NewUnaryHandler(
		DDDSampleServiceGetTicketProcedure,
		svc.GetTicket,
		opts...,
	))
	return "/dddsample.service.v1alpha1.DDDSampleService/", mux
}

// UnimplementedDDDSampleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDDDSampleServiceHandler struct{}

func (UnimplementedDDDSampleServiceHandler) CreateTicket(context.Context, *connect_go.Request[v1alpha1.CreateTicketRequest]) (*connect_go.Response[v1alpha1.CreateTicketResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dddsample.service.v1alpha1.DDDSampleService.CreateTicket is not implemented"))
}

func (UnimplementedDDDSampleServiceHandler) GetTicket(context.Context, *connect_go.Request[v1alpha1.GetTicketRequest]) (*connect_go.Response[v1alpha1.GetTicketResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("dddsample.service.v1alpha1.DDDSampleService.GetTicket is not implemented"))
}
